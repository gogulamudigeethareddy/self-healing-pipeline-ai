services:
  # Airflow Webserver
  airflow-webserver:
    image: apache/airflow:2.7.3
    container_name: airflow-webserver
    env_file:
      - .env
    depends_on:
      - airflow-init
    command: webserver
    environment:
      &airflow-common-env
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__WEBSERVER__SECRET_KEY: your-secret-key-here
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__PLUGINS_FOLDER: /opt/airflow/plugins
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      AIRFLOW__CORE__LOGS_FOLDER: /opt/airflow/logs
      AIRFLOW__CORE__BASE_LOG_FOLDER: /opt/airflow/logs
      AIRFLOW__CORE__DAG_FILE_PROCESSOR_TIMEOUT: 600
      AIRFLOW__WEBSERVER__WORKERS: 4
      AIRFLOW__WEBSERVER__WORKER_REFRESH_BATCH_SIZE: 1
      AIRFLOW__WEBSERVER__WORKER_REFRESH_INTERVAL: 30
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      AIRFLOW__CORE__ENABLE_XCOM_PICKLING: 'true'
      AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
      AIRFLOW__CORE__DEFAULT_TIMEZONE: 'UTC'
      _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/config:/opt/airflow/config
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    command: webserver

  # Airflow Scheduler
  airflow-scheduler:
    image: apache/airflow:2.7.3
    container_name: airflow-scheduler
    env_file:
      - .env
    depends_on:
      - airflow-webserver
    command: scheduler
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__WEBSERVER__SECRET_KEY: your-secret-key-here
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__PLUGINS_FOLDER: /opt/airflow/plugins
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      AIRFLOW__CORE__LOGS_FOLDER: /opt/airflow/logs
      AIRFLOW__CORE__BASE_LOG_FOLDER: /opt/airflow/logs
      AIRFLOW__CORE__DAG_FILE_PROCESSOR_TIMEOUT: 600
      AIRFLOW__WEBSERVER__WORKERS: 4
      AIRFLOW__WEBSERVER__WORKER_REFRESH_BATCH_SIZE: 1
      AIRFLOW__WEBSERVER__WORKER_REFRESH_INTERVAL: 30
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      AIRFLOW__CORE__ENABLE_XCOM_PICKLING: 'true'
      AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
      AIRFLOW__CORE__DEFAULT_TIMEZONE: 'UTC'
      _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/config:/opt/airflow/config
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    command: scheduler

  # PostgreSQL Database
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
    restart: always

  # Redis (for Celery if needed)
  redis:
    image: redis:latest
    container_name: redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: always

  # Airflow Init
  airflow-init:
    image: apache/airflow:2.7.3
    container_name: airflow-init
    environment:
      &airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-admin}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-admin}
      _PIP_ADDITIONAL_REQUIREMENTS: 'no'
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/config:/opt/airflow/config
    user: "0:0"
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins /sources/config
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins,config}
        exec /entrypoint airflow version

  # Backend Service
  backend:
    image: python:3.11
    container_name: backend
    env_file:
      - .env
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - ./agents:/app/agents
      - ./data:/app/../data
    working_dir: /app
    environment:
      - FLASK_PORT=5000
    command: /bin/bash -c "pip install -r requirements.txt && python app.py"
    depends_on:
      - postgres

  # Frontend Service
  frontend:
    image: node:18
    container_name: frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
    working_dir: /app
    command: /bin/bash -c "npm install && npm start"
    depends_on:
      - backend

volumes:
  postgres-db-volume: